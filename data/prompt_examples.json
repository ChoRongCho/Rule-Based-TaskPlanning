{
  "object_observation_message": [
    {"role": "user", "content": "We are going to do a cooking task which is cooking foods using given ingredients. \nIn our case, we are only doing slice. \nThese are the observations where I'm going to work. \nWhat objects or tools are here? Don't include a robot. \n"},
    {"role": "assistant", "content": "\nA knife = (color:black, shape:rectangle)\nA chopping board = (color:brown, shape:round)\nA cucumber = (color:green, shape:pipe)\nA bowl = (color:white, shape:round}"},
    {"role": "user", "content": "We are going to do a blocksworld task which is stacking blocks. \nThese are the observations where I'm going to work. \nWhat objects or tools are here? Don't include a robot. \n"},
    {"role": "assistant", "content": "\nA block1 = (color:green, shape:cube)\nA block2 = (color:yellow, shape:cube)\nA block3 = (color:pink, shape:cube)\nA block4 = (color:red, shape:cube}"},
    {"role": "user", "content": "We are going to do a bin_packing task which is packing all objects in the bin. \nThese are the observations where I'm going to work. \nWhat objects or tools are here? Don't include a robot. \n"},
    {"role": "assistant", "content": "\nA obj1 = (color:brown, shape:cube)\nA obj2 = (color:brown, shape:capsule)\nA obj3 = (color:blue, shape:cube)\nA obj4 = (color:black, shape:cone)\n"},
    {"role": "user", "content": "We are going to do a hanoi task which is stacking disks in order from the big ones. \nThese are the observations where I'm going to work. \nWhat objects or tools are here? Don't include a robot. \n"},
    {"role": "assistant", "content": "\nA disk1 = (color:green, shape:round)\nA disk2 = (color:blue, shape:round)\nA disk3 = (color:red, shape:round)\nA peg1 = (color:brown, shape:linear)\nA peg2 = (color:brown, shape:linear)\nA peg3 = (color:brown, shape:linear)\n"}
  ],

  "object_type_message": [
    {"role": "user", "content": "We are now going to do bin_packing which is packing all target objects into the box called bin. \nThere are many objects in interest such as box, obj1, obj2, obj3 and obj4. \nDivide the type of the objects according to the task. \n"},
    {"role": "assistant", "content": "1. Object: obj1, obj2, obj3, obj4. \n2. Bin: box. \n"},
    {"role": "user", "content": "We are now going to do cooking which is cooking foods using given ingredients. In our case, we are only doing slicing. \nWhen slicing, we only do them on the chopping board. There are many objects in interest such as a plate, carrot, knife, meat, garlic and hopping board. \nDivide the type of the objects according to the task. \n"},
    {"role": "assistant", "content": "1. Location: plate, chopping board. \n2. Ingredients: carrot, meat, garlic. \n3. Tool: knife. \n"},
    {"role": "user", "content": "We are now going to do blocksworld which is stacking blocks. \nThere are many objects in interest such as a block1, block2, block3, block4 and table. \nDivide the type of the objects according to the task. \n"},
    {"role": "assistant", "content": "1. Blocks: block1, block2, block3, block4. \n2. Base: table. \n"},
    {"role": "user", "content": "We are now going to do hanoi which is stacking disks in order from the big ones. \nThere are many objects in interest such as blue_disk, red_disk, green_disk, orange_disk, black_disk, wooden_peg1, wooden_peg2 and wooden_peg3. \nDivide the character of the object according to the task. \\n"},
    {"role": "assistant", "content": "1. Disks: blue_disk, red_disk, green_disk, orange_disk, black_disk. \n2. Pegs: wooden_peg1, wooden_peg2, wooden_peg3."}
  ],

  "object_state_message": [
    {"role": "user", "content": "This is an example of object class code. \n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Object:\n    # Basic dataclass\n    index: int\n    name: str\n    location: tuple\n    size: tuple\n    color: str or bool\n    object_type: str\n\n\nHowever, here are some predicates to be added such as is_rigid. \nAdd such predicates to class Object. \n"},
    {"role": "assistant", "content": "from dataclasses import dataclass\n\n\n@dataclass\nclass Object:\n    # Basic dataclass\n    index: int\n    name: str\n    location: tuple\n    size: tuple\n    color: str or bool\n    object_type: str\n\n    is_rigid: bool = True"},
    {"role": "user", "content": "This is a example robot state code. \n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Object:\n    # Basic dataclass\n    index: int\n    name: str\n    location: tuple\n    size: tuple\n    color: str or bool\n    object_type: str\n\n\nHowever, here are some predicates to add. is_black, is_orange, is_water, and is_foldable. \\n"},
    {"role": "assistant", "content": "from dataclasses import dataclass\n\n\n@dataclass\nclass Object:\n    # Basic dataclass\n    index: int\n    name: str\n    location: tuple\n    size: tuple\n    color: str or bool\n    object_type: str\n\n    is_black: bool = True\n\n    is_orange: bool = True\n\n    is_water: bool = True\n\n    is_foldable: bool = True"}
  ],

  "robot_action_message": [
    {"role": "user", "content": "We are now going to do a bin_packing task whose goal is packing all objects in the bin. \nWe have a basic python structure describing the available robot actions. \n@dataclass\n    class Objects:\n        # Basic dataclass\n        index: int\n        name: str\n        location: tuple\n        color: str or bool\n        object_type: str\n\n        is_flexible: bool\n        is_rigid: bool\n        is_soft: bool\n        is_fragile: bool\n        in_bin : bool\n\n    class Robot:\n        # Define skills\n        def __init__(self,\n                     name: str = \"UR5\",\n                     goal: str = None,\n                     actions: dict = None):\n            self.name = name\n            self.goal = goal\n            self.actions = actions\n    \n            self.robot_handempty = True\n            self.robot_now_holding = False\n            self.robot_base_pose = True\n    \n        # basic state\n        def state_handempty(self):\n            self.robot_handempty = True\n            self.robot_base_pose = False\n    \n        # basic state\n        def state_holding(self, objects):\n            self.robot_handempty = False\n            self.robot_now_holding = objects\n            self.robot_base_pose = False\n    \n        # basic state\n        def state_base(self):\n            self.robot_base_pose = True\n    \n        # bin_packing, cooking\n        def pick(self, obj):\n            # make a preconditions for actions\n            print(f\"Pick {obj.name}\")\n            \n        # bin_packing, cooking\n        def place(self, obj, bins):\n            # make a preconditions for actions\n            print(f\"Place {obj.name} in {bins.name}\")\n    \n    \n        # bin_packing\n        def push(self, obj):\n            # make a preconditions for actions\n            print(f\"Push {obj.name}\")\n    \n        # bin_packing\n        def fold(self, obj):\n            # make a preconditions for actions\n            print(f\"Fold {obj.name}\")\n        \n        def out(self, obj, bins):\n        # make a preconditions for actions\n        print(f\"Out {obj.name} from {obj.name}\")\n        \n        \n\nI want to modifying the preconditions and effects of the robot actions based on the rules. \n"},
    {"role": "user", "content": "\"pick\": \"pick an {object} not in the {bin}\",\n    \"place\": \"place an {object} on the {anywhere}\",\n    \"push\": \"push an {object} downward in the bin, hand must be empty when pushing\",\n    \"fold\": \"fold an {object}, hand must be empty when folding. you can fold the object in_bin or out_bin\",\n    \"out\": \"pick an {object} in {bin}\"\n    rule1: \"when place a fragile objects, the soft objects must be in the bin\",\n    rule2: \"when fold a object, the object must be flexible\",\n    rule3: \"when push a object, neither fragile and rigid objects are permitted, but only soft objects are permitted\",\n    rule4: \"you must push a soft object to make more space in the bin\",\n    \n\nPlease make more action conditions and effect of the robot state that used for bin_packing if you need. \n"},
    {"role": "assistant", "content": "    class Robot:\n        # Define skills\n        def __init__(self,\n                     name: str = \"UR5\",\n                     goal: str = None,\n                     actions: dict = None):\n            self.name = name\n            self.goal = goal\n            self.actions = actions\n\n            self.robot_handempty = True\n            self.robot_now_holding = False\n            self.robot_base_pose = True\n\n        # basic state\n        def state_handempty(self):\n            self.robot_handempty = True\n            self.robot_base_pose = False\n\n        # basic state\n        def state_holding(self, objects):\n            self.robot_handempty = False\n            self.robot_now_holding = objects\n            self.robot_base_pose = False\n\n        # basic state\n        def state_base(self):\n            self.robot_base_pose = True\n\n        def pick(self, obj):\n            if obj.in_bin:\n                raise Exception(\"Cannot pick an object that is already in the bin\")\n            print(f\"Pick {obj.name}\")\n            self.state_holding(obj)\n\n        def place(self, obj, bins):\n            if obj.is_fragile:\n                soft_objects_in_bin = any(o.is_soft and o.in_bin for o in bins.objects)\n                if not soft_objects_in_bin:\n                    raise Exception(\"Cannot place a fragile object without soft objects in the bin\")\n            print(f\"Place {obj.name} in {bins.name}\")\n            obj.in_bin = True\n            self.state_handempty()\n\n        def push(self, obj):\n            if not self.robot_handempty:\n                raise Exception(\"Hand must be empty to push an object\")\n            if obj.is_fragile or obj.is_rigid:\n                raise Exception(\"Cannot push fragile or rigid objects\")\n            if not obj.is_soft:\n                raise Exception(\"Only soft objects can be pushed\")\n            print(f\"Push {obj.name}\")\n            # No state change needed as hand remains empty\n\n        def fold(self, obj):\n            if not self.robot_handempty:\n                raise Exception(\"Hand must be empty to fold an object\")\n            if not obj.is_flexible:\n                raise Exception(\"Only flexible objects can be folded\")"},

    {"role": "user", "content": ""},
    {"role": "assistant", "content": ""}
  ],

  "domain_message": [
    {"role": "user", "content": "We are now going to do a bin_packing task whose goal is packing all objects in the bin. \nWe have a basic python dataclass code structures describing the predicates and the objects properties. \\n"},
    {"role": "assistant", "content": ""},
    {"role": "user", "content": ""},
    {"role": "assistant", "content": ""},
    {"role": "user", "content": ""},
    {"role": "assistant", "content": ""},
    {"role": "user", "content": ""},
    {"role": "assistant", "content": ""}
  ]
}