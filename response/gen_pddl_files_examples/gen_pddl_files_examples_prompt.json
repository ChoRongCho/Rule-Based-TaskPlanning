{
    "name": "gen_pddl_files_examples",
    "prompt": {
        "predicates": "Hi, my name is UR5, and I am a robot. \nOur goal is to pack a set of objects into a box, which is called bin packing. In a problem instance, there is a box, a manipulator robot(it's me!), and objects set. \nWe want to consider physical properties of the objects such as flexible, rigid, soft, and fragile. \nGiven this goal, I want to make a domain.pddl considering the physical properties of the objects. The domain file is supposed to include predicates such as is_flexible. Actions must consider the predicates in preconditions and effects. \n",
        "instruction": "Now, I'm going to talk about precautions when doing bin packing. \nDuring packing the objects, I want to follow several rules. First, put a fragile object on top of a soft object to prevent breaking the fragile object.\nSecond, a flexible object is preferred to be folded to make it compact to secure spaces for other objects.\nThird, a rigid object should not be pressed hard.\nFourth, a deformable object can be pressed if possible.\nThe actions I can do are push, place, pick, fold, and base. \nWhen you define action in domain.pddl, you must use that action set. No other actions is permitted. \n",
        "pddl": "Now, I'm going to talk about precautions when doing bin packing. \nDuring packing the objects, I want to follow several rules. First, put a fragile object on top of a soft object to prevent breaking the fragile object.\nSecond, a flexible object is preferred to be folded to make it compact to secure spaces for other objects.\nThird, a rigid object should not be pressed hard.\nFourth, a deformable object can be pressed if possible.\nThe actions I can do are push, place, pick, fold, and base. \nWhen you define action in domain.pddl, you must use that action set. No other actions is permitted. \nHere is an example of a problem.pddl. \n(define (problem packing) \n(:domain packing)\n(:objects \n    item1, item2, item3 - item\n    bot - robot\n    box - bin\n    plate - out_bin\n)\n\n(:init\n    (is-empty box)\n    (hand-empty bot)\n    (out_of_bin item1)\n    (out_of_bin item2)\n    (out_of_bin item3)\n)\n\n(:goal \n    (and\n        (is-clear plate)\n        (hand-empty bot)\n        (in_bin item1)\n        (in_bin item2)\n        (in_bin item3)\n    )\n)\n)\n \nThe initial state and goal state will be given like this. \nHere is an example of a domain.pddl. \n;Header and description\n\n(define (domain packing)\n\n;remove requirements that are not needed\n(:requirements :strips :fluents :durative-actions :timed-initial-literals :typing :conditional-effects :negative-preconditions :duration-inequalities :equality)\n\n(:types ;todo: enumerate types and their hierarchy here, e.g. car truck bus - vehicle\n    out_bin, bin - place\n    robot\n    item - object\n    soft, fragile, flexible, rigid - property\n)\n\n(:predicates ;todo: define predicates here\n\n    ; General place predicates\n    (is-clear ?out_bin)\n    (is-empty ?bin)\n\n    ; Robot predicates\n    (hand-empty ?robot)\n\n    ; Object property predicates\n    (is_soft ?soft ?item)\n    (is_fragile ?fragile ?item)\n    (is_flexible ?flexible ?item)\n    (is_rigid ?rigid ?item)\n\n    ; Object place predicates\n    (out_of_bin ?item)\n    (in_bin ?item)\n)\n\n\n(:functions ;todo: define numeric functions here\n)\n\n;define actions here\n(:action pick\n    :parameters ()\n    :precondition (and )\n    :effect (and )\n)\n\n(:action place\n    :parameters ()\n    :precondition (and )\n    :effect (and )\n)\n\n(:action fold\n    :parameters ()\n    :precondition (and )\n    :effect (and )\n)\n\n(:action press\n    :parameters ()\n    :precondition (and )\n    :effect (and )\n)\n) \nRefer this pddl and fill the blank section of this domain.pddl \nPlease generate the only filled pddl part without any description."
    }
}