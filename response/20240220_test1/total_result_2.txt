
detected_object: {0: {'white box': [509, 210, 231, 323]}, 1: {'blue object': [204, 220, 361, 247]}, 2: {'yellow object': [83, 158, 135, 216]}, 3: {'brown object': [257, 95, 139, 148]}}
------------------------------------------------------------

detected_object_types: {'Objects_out_box': ['yellow object', 'brown object', 'blue object '], 'Objects_in_box': [''], 'Bin': ['white box']}
------------------------------------------------------------

detected_object_predicates: {0: ['is_rigid'], 1: ['is_flexible'], 2: ['is_flexible'], 3: ['is_flexible', 'is_soft']}
------------------------------------------------------------

object_class_python_script:
from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    location: tuple
    size: tuple
    color: str or bool
    object_type: str

    # Object physical properties predicates
    is_rigid: bool=False
    is_flexible: bool=False
    is_soft: bool=False

    # bin_packing Predicates (max 4)
    in_bin: bool=False
    out_bin: bool=False
    is_stackable: bool=False
    is_bigger_than_bin: bool=False
    on_the_object: Object or bool=False
------------------------------------------------------------

robot_class_python_script:
class Robot:
    # Define skills
    def __init__(self,
                 name: str = "UR5",
                 goal: str = None,
                 actions: dict = None):
        self.name = name
        self.goal = goal
        self.actions = actions

        self.robot_handempty = True
        self.robot_now_holding = None
        self.robot_base_pose = True

    # basic state
    def state_handempty(self):
        self.robot_handempty = True
        self.robot_base_pose = False

    # basic state
    def state_holding(self, obj):
        self.robot_handempty = False
        self.robot_now_holding = obj
        self.robot_base_pose = False

    # basic state
    def state_base(self):
        self.robot_base_pose = True

    # bin_packing
    def pick(self, obj):
        if obj.in_bin:
            print("Cannot pick an object in the bin.")
        else:
            print(f"Pick {obj.name}")
            self.state_holding(obj)
            obj.out_bin = True
            obj.in_bin = False

    # bin_packing
    def place(self, obj, bins):
        if self.robot_now_holding != obj:
            print("Cannot place an object not in hand.")
        elif obj.is_fragile and not any(o.is_soft and o.in_bin for o in bins.objects):
            print("Cannot place a fragile object without a soft object in the bin.")
        else:
            print(f"Place {obj.name} in {bins.name}")
            self.state_handempty()
            obj.in_bin = True
            obj.out_bin = False

    # bin_packing
    def push(self, obj):
        if not self.robot_handempty:
            print("Cannot push an object when hand is not empty.")
        elif obj.is_fragile or obj.is_rigid:
            print("Cannot push a fragile or rigid object.")
        else:
            print(f"Push {obj.name}")
            obj.in_bin = True
            obj.out_bin = False

    # bin_packing
    def fold(self, obj):
        if not self.robot_handempty:
            print("Cannot fold an object when hand is not empty.")
        elif not obj.is_flexible:
            print("Cannot fold a non-flexible object.")
        else:
            print(f"Fold {obj.name}")
            obj.in_bin = True
            obj.out_bin = False

    def out(self, obj, bins):
        if not obj.in_bin:
            print("Cannot pick an object not in the bin.")
        else:
            print(f"Out {obj.name} from {bins.name}")
            self.state_holding(obj)
            obj.in_bin = False
            obj.out_bin = True
------------------------------------------------------------