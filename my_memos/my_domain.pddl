;Header and description

(define (domain bin_packing)

;remove requirements that are not needed
(:requirements :strips :fluents :durative-actions :timed-initial-literals :typing :conditional-effects :negative-preconditions :duration-inequalities :equality)

(:types ;todo: enumerate types and their hierarchy here, e.g. car truck bus - vehicle
    object - item
    shape size fragility flexibility soft - property ; generated by LLMs
    bin - box
    robot - agent
    location
)

; un-comment following line if constants are needed
;(:constants )

(:predicates ;todo: define predicates here
    
    ; robot
    (hand-free ?r - robot)
    (hand-full ?r - robot)
    (holding ?x - object)

    ; generated by LLM
    (clear ?x - object)
    (is-round ?x - object ?sh - shape)
    (is-rectangluar ?x - object ?sh - shape)
    (is-linear ?x - object ?sh - shape)
    (is-big ?x - object ?si - size)
    (is-small ?x - object ?si - size)
    (is-flexible ?x - object ?fl - flexibility)
    (is-fragile ?x - object ?fr - fragility)
    (is-soft ?x - object ?sf - soft)
    (on ?x - object ?y - object)
    (is-pressed ?x - object)

    ; bin
    (in-bin ?x - object)
    (pack-all ?b - bin)
    (free-bin ?b - bin ?l - location)
    (full-bin ?b - bin ?l - location ?y - object)
)


(:functions ;todo: define numeric functions here
)

;define actions here
(:action pick
    :parameters (?x - object ?r - robot)
    :precondition (and 
        (clear ?x)
        (not (in-bin ?x))
        (hand-free ?r)
        (not (hand-full ?r ?x))
    )
    :effect (and
        (not (hand-free ?r))
        (hand-full ?r)
        (holding ?x)
    )
)

(:action place
    :parameters (?x ?y - object ?b - bin ?l - location ?r - robot ?fr - fragility ?fl - flexibility ?sh - shape ?si - size ?sf - soft)
    :precondition (and 
                    (and 
                        (not (hand-free ?r))
                        (hand-full ?r)  
                        (holding ?x)
                        (free-bin ?b ?l))
                    (or 
                        (is-small ?x ?si)
                        (and (is-big ?x ?si)
                            (is-soft ?x ?sf))
                        )
                    )
    
    :effect (and
                (forall (?x) 
                    (when (and (is-fragile ?x ?fl) (is-soft ?y ?sf)) 
                    (on ?x ?y))
                )
                (forall (?x)
                    (when (and (is-soft ?x ?sf) (is-big ?x ?si)) 
                    (is-pressed ?x))
                )   
                (forall (?x) 
                    (when (and (is-flexible ?x ?fl)(is-linear ?x ?sh))
                    (is-pressed ?x))
                )
                (in-bin ?x)
                ()
            )
)



(:action press
    :parameters ()
    :precondition (and
        ()
    )
    :effect (and)
)

(:action pack
    :parameters ()
    :precondition (and 
        
    )
    :effect (and 
        
    )
)

(:action fold
    :parameters ()
    :precondition (and 
        
    )
    :effect (and 
        
    )
)

)